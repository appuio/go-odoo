package odoo

import (
	"fmt"
)

// PurchaseOrder represents purchase.order model.
type PurchaseOrder struct {
	LastUpdate                  *Time      `xmlrpc:"__last_update,omptempty"`
	AccessToken                 *String    `xmlrpc:"access_token,omptempty"`
	AccessUrl                   *String    `xmlrpc:"access_url,omptempty"`
	AccessWarning               *String    `xmlrpc:"access_warning,omptempty"`
	ActivityCalendarEventId     *Many2One  `xmlrpc:"activity_calendar_event_id,omptempty"`
	ActivityDateDeadline        *Time      `xmlrpc:"activity_date_deadline,omptempty"`
	ActivityExceptionDecoration *Selection `xmlrpc:"activity_exception_decoration,omptempty"`
	ActivityExceptionIcon       *String    `xmlrpc:"activity_exception_icon,omptempty"`
	ActivityIds                 *Relation  `xmlrpc:"activity_ids,omptempty"`
	ActivityState               *Selection `xmlrpc:"activity_state,omptempty"`
	ActivitySummary             *String    `xmlrpc:"activity_summary,omptempty"`
	ActivityTypeIcon            *String    `xmlrpc:"activity_type_icon,omptempty"`
	ActivityTypeId              *Many2One  `xmlrpc:"activity_type_id,omptempty"`
	ActivityUserId              *Many2One  `xmlrpc:"activity_user_id,omptempty"`
	AmountTax                   *Float     `xmlrpc:"amount_tax,omptempty"`
	AmountTotal                 *Float     `xmlrpc:"amount_total,omptempty"`
	AmountUntaxed               *Float     `xmlrpc:"amount_untaxed,omptempty"`
	AutoGenerated               *Bool      `xmlrpc:"auto_generated,omptempty"`
	AutoSaleOrderId             *Many2One  `xmlrpc:"auto_sale_order_id,omptempty"`
	CompanyId                   *Many2One  `xmlrpc:"company_id,omptempty"`
	CountryCode                 *String    `xmlrpc:"country_code,omptempty"`
	CreateDate                  *Time      `xmlrpc:"create_date,omptempty"`
	CreateUid                   *Many2One  `xmlrpc:"create_uid,omptempty"`
	CurrencyId                  *Many2One  `xmlrpc:"currency_id,omptempty"`
	CurrencyRate                *Float     `xmlrpc:"currency_rate,omptempty"`
	DateApprove                 *Time      `xmlrpc:"date_approve,omptempty"`
	DateCalendarStart           *Time      `xmlrpc:"date_calendar_start,omptempty"`
	DateOrder                   *Time      `xmlrpc:"date_order,omptempty"`
	DatePlanned                 *Time      `xmlrpc:"date_planned,omptempty"`
	DefaultLocationDestIdUsage  *Selection `xmlrpc:"default_location_dest_id_usage,omptempty"`
	DestAddressId               *Many2One  `xmlrpc:"dest_address_id,omptempty"`
	DisplayName                 *String    `xmlrpc:"display_name,omptempty"`
	EffectiveDate               *Time      `xmlrpc:"effective_date,omptempty"`
	FailedMessageIds            *Relation  `xmlrpc:"failed_message_ids,omptempty"`
	FiscalPositionId            *Many2One  `xmlrpc:"fiscal_position_id,omptempty"`
	GroupId                     *Many2One  `xmlrpc:"group_id,omptempty"`
	HasMessage                  *Bool      `xmlrpc:"has_message,omptempty"`
	Id                          *Int       `xmlrpc:"id,omptempty"`
	IncomingPickingCount        *Int       `xmlrpc:"incoming_picking_count,omptempty"`
	IncotermId                  *Many2One  `xmlrpc:"incoterm_id,omptempty"`
	IncotermLocation            *String    `xmlrpc:"incoterm_location,omptempty"`
	InvoiceCount                *Int       `xmlrpc:"invoice_count,omptempty"`
	InvoiceIds                  *Relation  `xmlrpc:"invoice_ids,omptempty"`
	InvoiceStatus               *Selection `xmlrpc:"invoice_status,omptempty"`
	IsShipped                   *Bool      `xmlrpc:"is_shipped,omptempty"`
	L10NDin5008Addresses        *String    `xmlrpc:"l10n_din5008_addresses,omptempty"`
	L10NDin5008DocumentTitle    *String    `xmlrpc:"l10n_din5008_document_title,omptempty"`
	L10NDin5008TemplateData     *String    `xmlrpc:"l10n_din5008_template_data,omptempty"`
	MailReceptionConfirmed      *Bool      `xmlrpc:"mail_reception_confirmed,omptempty"`
	MailReminderConfirmed       *Bool      `xmlrpc:"mail_reminder_confirmed,omptempty"`
	MessageAttachmentCount      *Int       `xmlrpc:"message_attachment_count,omptempty"`
	MessageContent              *String    `xmlrpc:"message_content,omptempty"`
	MessageFollowerIds          *Relation  `xmlrpc:"message_follower_ids,omptempty"`
	MessageHasError             *Bool      `xmlrpc:"message_has_error,omptempty"`
	MessageHasErrorCounter      *Int       `xmlrpc:"message_has_error_counter,omptempty"`
	MessageHasSmsError          *Bool      `xmlrpc:"message_has_sms_error,omptempty"`
	MessageIds                  *Relation  `xmlrpc:"message_ids,omptempty"`
	MessageIsFollower           *Bool      `xmlrpc:"message_is_follower,omptempty"`
	MessageMainAttachmentId     *Many2One  `xmlrpc:"message_main_attachment_id,omptempty"`
	MessageNeedaction           *Bool      `xmlrpc:"message_needaction,omptempty"`
	MessageNeedactionCounter    *Int       `xmlrpc:"message_needaction_counter,omptempty"`
	MessagePartnerIds           *Relation  `xmlrpc:"message_partner_ids,omptempty"`
	MyActivityDateDeadline      *Time      `xmlrpc:"my_activity_date_deadline,omptempty"`
	Name                        *String    `xmlrpc:"name,omptempty"`
	Notes                       *String    `xmlrpc:"notes,omptempty"`
	OnTimeRate                  *Float     `xmlrpc:"on_time_rate,omptempty"`
	OrderLine                   *Relation  `xmlrpc:"order_line,omptempty"`
	Origin                      *String    `xmlrpc:"origin,omptempty"`
	PartnerId                   *Many2One  `xmlrpc:"partner_id,omptempty"`
	PartnerRef                  *String    `xmlrpc:"partner_ref,omptempty"`
	PaymentTermId               *Many2One  `xmlrpc:"payment_term_id,omptempty"`
	PickingIds                  *Relation  `xmlrpc:"picking_ids,omptempty"`
	PickingTypeId               *Many2One  `xmlrpc:"picking_type_id,omptempty"`
	Priority                    *Selection `xmlrpc:"priority,omptempty"`
	ProductId                   *Many2One  `xmlrpc:"product_id,omptempty"`
	ReceiptReminderEmail        *Bool      `xmlrpc:"receipt_reminder_email,omptempty"`
	ReceiptStatus               *Selection `xmlrpc:"receipt_status,omptempty"`
	ReminderDateBeforeReceipt   *Int       `xmlrpc:"reminder_date_before_receipt,omptempty"`
	SaleOrderCount              *Int       `xmlrpc:"sale_order_count,omptempty"`
	State                       *Selection `xmlrpc:"state,omptempty"`
	TaxCountryId                *Many2One  `xmlrpc:"tax_country_id,omptempty"`
	TaxTotals                   *String    `xmlrpc:"tax_totals,omptempty"`
	UserId                      *Many2One  `xmlrpc:"user_id,omptempty"`
	WebsiteMessageIds           *Relation  `xmlrpc:"website_message_ids,omptempty"`
	WriteDate                   *Time      `xmlrpc:"write_date,omptempty"`
	WriteUid                    *Many2One  `xmlrpc:"write_uid,omptempty"`
}

// PurchaseOrders represents array of purchase.order model.
type PurchaseOrders []PurchaseOrder

// PurchaseOrderModel is the odoo model name.
const PurchaseOrderModel = "purchase.order"

// Many2One convert PurchaseOrder to *Many2One.
func (po *PurchaseOrder) Many2One() *Many2One {
	return NewMany2One(po.Id.Get(), "")
}

// CreatePurchaseOrder creates a new purchase.order model and returns its id.
func (c *Client) CreatePurchaseOrder(po *PurchaseOrder) (int64, error) {
	ids, err := c.CreatePurchaseOrders([]*PurchaseOrder{po})
	if err != nil {
		return -1, err
	}
	if len(ids) == 0 {
		return -1, nil
	}
	return ids[0], nil
}

// CreatePurchaseOrder creates a new purchase.order model and returns its id.
func (c *Client) CreatePurchaseOrders(pos []*PurchaseOrder) ([]int64, error) {
	var vv []interface{}
	for _, v := range pos {
		vv = append(vv, v)
	}
	return c.Create(PurchaseOrderModel, vv)
}

// UpdatePurchaseOrder updates an existing purchase.order record.
func (c *Client) UpdatePurchaseOrder(po *PurchaseOrder) error {
	return c.UpdatePurchaseOrders([]int64{po.Id.Get()}, po)
}

// UpdatePurchaseOrders updates existing purchase.order records.
// All records (represented by ids) will be updated by po values.
func (c *Client) UpdatePurchaseOrders(ids []int64, po *PurchaseOrder) error {
	return c.Update(PurchaseOrderModel, ids, po)
}

// DeletePurchaseOrder deletes an existing purchase.order record.
func (c *Client) DeletePurchaseOrder(id int64) error {
	return c.DeletePurchaseOrders([]int64{id})
}

// DeletePurchaseOrders deletes existing purchase.order records.
func (c *Client) DeletePurchaseOrders(ids []int64) error {
	return c.Delete(PurchaseOrderModel, ids)
}

// GetPurchaseOrder gets purchase.order existing record.
func (c *Client) GetPurchaseOrder(id int64) (*PurchaseOrder, error) {
	pos, err := c.GetPurchaseOrders([]int64{id})
	if err != nil {
		return nil, err
	}
	if pos != nil && len(*pos) > 0 {
		return &((*pos)[0]), nil
	}
	return nil, fmt.Errorf("id %v of purchase.order not found", id)
}

// GetPurchaseOrders gets purchase.order existing records.
func (c *Client) GetPurchaseOrders(ids []int64) (*PurchaseOrders, error) {
	pos := &PurchaseOrders{}
	if err := c.Read(PurchaseOrderModel, ids, nil, pos); err != nil {
		return nil, err
	}
	return pos, nil
}

// FindPurchaseOrder finds purchase.order record by querying it with criteria.
func (c *Client) FindPurchaseOrder(criteria *Criteria) (*PurchaseOrder, error) {
	pos := &PurchaseOrders{}
	if err := c.SearchRead(PurchaseOrderModel, criteria, NewOptions().Limit(1), pos); err != nil {
		return nil, err
	}
	if pos != nil && len(*pos) > 0 {
		return &((*pos)[0]), nil
	}
	return nil, fmt.Errorf("purchase.order was not found with criteria %v", criteria)
}

// FindPurchaseOrders finds purchase.order records by querying it
// and filtering it with criteria and options.
func (c *Client) FindPurchaseOrders(criteria *Criteria, options *Options) (*PurchaseOrders, error) {
	pos := &PurchaseOrders{}
	if err := c.SearchRead(PurchaseOrderModel, criteria, options, pos); err != nil {
		return nil, err
	}
	return pos, nil
}

// FindPurchaseOrderIds finds records ids by querying it
// and filtering it with criteria and options.
func (c *Client) FindPurchaseOrderIds(criteria *Criteria, options *Options) ([]int64, error) {
	ids, err := c.Search(PurchaseOrderModel, criteria, options)
	if err != nil {
		return []int64{}, err
	}
	return ids, nil
}

// FindPurchaseOrderId finds record id by querying it with criteria.
func (c *Client) FindPurchaseOrderId(criteria *Criteria, options *Options) (int64, error) {
	ids, err := c.Search(PurchaseOrderModel, criteria, options)
	if err != nil {
		return -1, err
	}
	if len(ids) > 0 {
		return ids[0], nil
	}
	return -1, fmt.Errorf("purchase.order was not found with criteria %v and options %v", criteria, options)
}
